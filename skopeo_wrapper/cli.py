#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è skopeo-wrapper
"""

import sys
import argparse
import json
import threading
import time
from typing import Optional
from .skopeo_wrapper import SkopeoWrapper, create_progress_callback
from .metrics_server import start_global_metrics_server, stop_global_metrics_server, get_metrics_server


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã skopeo",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  skopeo-wrapper copy docker://alpine:latest dir:/tmp/alpine
  skopeo-wrapper inspect docker://ubuntu:22.04
  skopeo-wrapper copy docker://nginx:latest dir:/tmp/nginx --progress
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ copy
    copy_parser = subparsers.add_parser('copy', help='–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞')
    copy_parser.add_argument('source', help='–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—Ä–∞–∑–∞')
    copy_parser.add_argument('destination', help='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ')
    copy_parser.add_argument('--progress', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
    copy_parser.add_argument('--timeout', type=int, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ inspect
    inspect_parser = subparsers.add_parser('inspect', help='–ò–Ω—Å–ø–µ–∫—Ü–∏—è –æ–±—Ä–∞–∑–∞')
    inspect_parser.add_argument('image', help='URL –æ–±—Ä–∞–∑–∞')
    inspect_parser.add_argument('--progress', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
    inspect_parser.add_argument('--timeout', type=int, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    inspect_parser.add_argument('--json', action='store_true', help='–í—ã–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON')
    
    # –ö–æ–º–∞–Ω–¥–∞ delete
    delete_parser = subparsers.add_parser('delete', help='–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞')
    delete_parser.add_argument('image', help='URL –æ–±—Ä–∞–∑–∞')
    delete_parser.add_argument('--progress', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
    delete_parser.add_argument('--timeout', type=int, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ manifest-digest
    digest_parser = subparsers.add_parser('manifest-digest', help='–ü–æ–ª—É—á–µ–Ω–∏–µ digest –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞')
    digest_parser.add_argument('image', help='URL –æ–±—Ä–∞–∑–∞')
    digest_parser.add_argument('--progress', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
    digest_parser.add_argument('--timeout', type=int, help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ metrics-server
    metrics_parser = subparsers.add_parser('metrics-server', help='–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫')
    metrics_parser.add_argument('--host', default='localhost', help='–•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫')
    metrics_parser.add_argument('--port', type=int, default=8000, help='–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫')
    metrics_parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ metrics
    metrics_show_parser = subparsers.add_parser('metrics', help='–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏')
    metrics_show_parser.add_argument('--format', choices=['prometheus', 'json'], default='prometheus', help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞')
    
    # –û–±—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')
    parser.add_argument('--skopeo-path', default='skopeo', help='–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É skopeo')
    parser.add_argument('--enable-metrics', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫')
    parser.add_argument('--disable-metrics', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    enable_metrics = True
    if hasattr(args, 'enable_metrics') and getattr(args, 'enable_metrics', False):
        enable_metrics = True
    elif hasattr(args, 'disable_metrics') and getattr(args, 'disable_metrics', False):
        enable_metrics = False
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
    skopeo = SkopeoWrapper(skopeo_path=args.skopeo_path, enable_metrics=enable_metrics)
    
    # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_callback = create_progress_callback(show_progress=getattr(args, 'progress', False)) if getattr(args, 'progress', False) else None
    
    try:
        if args.command == 'copy':
            success, stdout, stderr = skopeo.copy(
                source=args.source,
                destination=args.destination,
                progress_callback=progress_callback,
                timeout=getattr(args, 'timeout', None)
            )
            
            if success:
                print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                sys.exit(0)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {stderr}")
                sys.exit(1)
                
        elif args.command == 'inspect':
            success, stdout, stderr = skopeo.inspect(
                image=args.image,
                progress_callback=progress_callback,
                timeout=getattr(args, 'timeout', None)
            )
            
            if success:
                if args.json:
                    try:
                        data = json.loads(stdout)
                        print(json.dumps(data, indent=2, ensure_ascii=False))
                    except json.JSONDecodeError:
                        print(stdout)
                else:
                    print(stdout)
                sys.exit(0)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {stderr}")
                sys.exit(1)
                
        elif args.command == 'delete':
            success, stdout, stderr = skopeo.delete(
                image=args.image,
                progress_callback=progress_callback,
                timeout=getattr(args, 'timeout', None)
            )
            
            if success:
                print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                sys.exit(0)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {stderr}")
                sys.exit(1)
                
        elif args.command == 'manifest-digest':
            success, stdout, stderr = skopeo.get_manifest_digest(
                image=args.image,
                progress_callback=progress_callback,
                timeout=getattr(args, 'timeout', None)
            )
            
            if success:
                print(stdout.strip())
                sys.exit(0)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è digest: {stderr}")
                sys.exit(1)
                
        elif args.command == 'metrics-server':
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            if not enable_metrics:
                print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --enable-metrics –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.")
                sys.exit(1)
            
            server = start_global_metrics_server(host=args.host, port=args.port)
            
            if args.daemon:
                print(f"üöÄ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ {server.get_url()}")
                print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: {}/metrics".format(server.get_url()))
                print("‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {}/health".format(server.get_url()))
                print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
                
                try:
                    while server.is_running():
                        time.sleep(1)
                except KeyboardInterrupt:
                    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫...")
                    stop_global_metrics_server()
            else:
                print(f"üöÄ –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {server.get_url()}")
                print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: {}/metrics".format(server.get_url()))
                print("‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {}/health".format(server.get_url()))
                print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
                
                try:
                    while server.is_running():
                        time.sleep(1)
                except KeyboardInterrupt:
                    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫...")
                    stop_global_metrics_server()
            
            sys.exit(0)
            
        elif args.command == 'metrics':
            # –ü–æ–∫–∞–∑ –º–µ—Ç—Ä–∏–∫
            if not enable_metrics:
                print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --enable-metrics –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.")
                sys.exit(1)
            
            if args.format == 'prometheus':
                metrics_data = skopeo.get_metrics()
                if metrics_data:
                    print(metrics_data)
                else:
                    print("# –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
            elif args.format == 'json':
                metrics_dict = skopeo.get_metrics_dict()
                if metrics_dict:
                    print(json.dumps(metrics_dict, indent=2, ensure_ascii=False))
                else:
                    print("{}")
            
            sys.exit(0)
                
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
