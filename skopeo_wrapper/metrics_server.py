#!/usr/bin/env python3
"""
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Prometheus –º–µ—Ç—Ä–∏–∫
"""

import threading
import time
from typing import Optional
from http.server import HTTPServer, BaseHTTPRequestHandler
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
from .metrics import get_metrics, SkopeoMetrics


class MetricsHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫ Prometheus"""
    
    def __init__(self, metrics: SkopeoMetrics, *args, **kwargs):
        self.metrics = metrics
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/metrics':
            self.send_response(200)
            self.send_header('Content-Type', CONTENT_TYPE_LATEST)
            self.end_headers()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_data = generate_latest(self.metrics.registry)
            self.wfile.write(metrics_data)
        elif self.path == '/health':
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
        elif self.path == '/':
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            
            html = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Skopeo Wrapper Metrics</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    h1 { color: #333; }
                    .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 5px; }
                    code { background: #e8e8e8; padding: 2px 5px; border-radius: 3px; }
                </style>
            </head>
            <body>
                <h1>Skopeo Wrapper Metrics Server</h1>
                <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
                <div class="endpoint">
                    <strong>GET /metrics</strong> - Prometheus –º–µ—Ç—Ä–∏–∫–∏
                </div>
                <div class="endpoint">
                    <strong>GET /health</strong> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
                </div>
                <div class="endpoint">
                    <strong>GET /</strong> - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                </div>
                <p>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</p>
                <code>curl http://localhost:8000/metrics</code>
            </body>
            </html>
            """
            self.wfile.write(html.encode('utf-8'))
        else:
            self.send_response(404)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        pass


class MetricsServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ Prometheus"""
    
    def __init__(self, host: str = 'localhost', port: int = 8000, metrics: Optional[SkopeoMetrics] = None):
        self.host = host
        self.port = port
        self.metrics = metrics or get_metrics()
        self.server = None
        self.server_thread = None
        self.running = False
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            return
        
        def handler(*args, **kwargs):
            return MetricsHandler(self.metrics, *args, **kwargs)
        
        try:
            self.server = HTTPServer((self.host, self.port), handler)
            self.running = True
            
            def run_server():
                print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ http://{self.host}:{self.port}")
                print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://{self.host}:{self.port}/metrics")
                print(f"‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://{self.host}:{self.port}/health")
                self.server.serve_forever()
            
            self.server_thread = threading.Thread(target=run_server, daemon=True)
            self.server_thread.start()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            self.running = False
            raise
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫"""
        if not self.running or not self.server:
            return
        
        self.running = False
        self.server.shutdown()
        self.server.server_close()
        
        if self.server_thread and self.server_thread.is_alive():
            self.server_thread.join(timeout=5)
        
        print("üõë –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
        return self.running and self.server_thread and self.server_thread.is_alive()
    
    def get_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        return f"http://{self.host}:{self.port}"


def start_metrics_server(host: str = 'localhost', port: int = 8000, metrics: Optional[SkopeoMetrics] = None) -> MetricsServer:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫
    
    Args:
        host: –•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        metrics: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π)
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä MetricsServer
    """
    server = MetricsServer(host, port, metrics)
    server.start()
    return server


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
_global_server: Optional[MetricsServer] = None


def get_metrics_server() -> Optional[MetricsServer]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    return _global_server


def start_global_metrics_server(host: str = 'localhost', port: int = 8000) -> MetricsServer:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫"""
    global _global_server
    if _global_server is None or not _global_server.is_running():
        _global_server = start_metrics_server(host, port)
    return _global_server


def stop_global_metrics_server() -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫"""
    global _global_server
    if _global_server:
        _global_server.stop()
        _global_server = None


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    import signal
    import sys
    
    def signal_handler(sig, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        stop_global_metrics_server()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = start_global_metrics_server()
    
    try:
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
        while server.is_running():
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        stop_global_metrics_server()
