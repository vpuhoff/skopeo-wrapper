#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏–º–∏—Ç–∞–º–∏ Docker Hub
"""

from skopeo_wrapper import SkopeoWrapper, ProgressInfo, get_progress_percentage
import time
import sys


def real_progress_callback(progress: ProgressInfo):
    """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏"""
    timestamp = time.strftime("%H:%M:%S")
    print(f"\n[{timestamp}] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    print(f"   üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {progress.operation}")
    print(f"   üìç –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {progress.current_step}")
    
    if progress.parser:
        print(f"   üì¶ Blob'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(progress.parser.blobs)}")
        if progress.parser.blobs:
            print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ blob'—ã:")
            for sha256, blob in list(progress.parser.blobs.items())[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                status_emoji = "‚úÖ" if blob.status == "completed" else "üîÑ" if blob.status == "in_progress" else "‚è≥"
                size_mb = blob.size / 1024 / 1024 if blob.size else 0
                print(f"     {status_emoji} {sha256[:16]}... ({blob.status}) {size_mb:.1f}MB")
        else:
            print(f"   üìã Blob'—ã: –æ–∂–∏–¥–∞–Ω–∏–µ...")
    
    print(f"   üìÑ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–ø–∏—Å–∞–Ω: {'‚úÖ' if progress.manifest_written else '‚ùå'}")
    print(f"   üîê –ü–æ–¥–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {'‚úÖ' if progress.signatures_stored else '‚ùå'}")
    
    if progress.current_blob:
        size_mb = progress.current_blob.size / 1024 / 1024 if progress.current_blob.size else 0
        print(f"   üéØ –¢–µ–∫—É—â–∏–π blob: {progress.current_blob.sha256[:16]}... ({size_mb:.1f}MB)")
    
    if progress.error:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {progress.error}")
    elif progress.completed:
        print(f"   üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
        # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100%
        bar = "‚ñà" * 20
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} 100.0%")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if progress.parser:
            percentage = get_progress_percentage(progress, progress.parser)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ
            if progress.current_step == "getting_signatures":
                percentage = 10.0
            elif progress.current_step == "copying_blob":
                percentage = 50.0
            elif progress.current_step == "copying_config":
                percentage = 75.0
            elif progress.current_step == "writing_manifest":
                percentage = 90.0
            elif progress.current_step == "storing_signatures":
                percentage = 95.0
            elif progress.current_step == "starting":
                percentage = 5.0
            else:
                percentage = 0.0
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 20
        filled_length = int(bar_length * percentage / 100)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {percentage:.1f}%")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    sys.stdout.flush()


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏"""
    print("üåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    print("‚ö†Ô∏è  –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ª–∏–º–∏—Ç–∞–º–∏ Docker Hub")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
    skopeo = SkopeoWrapper()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = "/tmp/skopeo_remote_demo"
    import os
    os.makedirs(test_dir, exist_ok=True)
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    small_images = [
        "docker://docker.io/library/hello-world:latest",
        "docker://docker.io/library/alpine:latest"
    ]
    
    print(f"\nüìã –û–±—Ä–∞–∑—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {len(small_images)}")
    for i, image in enumerate(small_images, 1):
        print(f"   {i}. {image}")
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
    print("üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å blob'–∞–º–∏!")
    
    successful_copies = 0
    
    for i, image in enumerate(small_images, 1):
        image_name = image.split('/')[-1].replace(':', '_')
        print(f"\n{'='*60}")
        print(f"üì¶ [{i}/{len(small_images)}] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {image}")
        print(f"üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {image}")
        print(f"üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: dir:{test_dir}/{image_name}")
        print(f"‚è±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        start_time = time.time()
        success, stdout, stderr = skopeo.copy(
            source=image,
            destination=f"dir:{test_dir}/{image_name}",
            progress_callback=real_progress_callback,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        )
        end_time = time.time()
        duration = end_time - start_time
        
        if success:
            print(f"\n‚úÖ {image_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥!")
            successful_copies += 1
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {image_name}: {stderr}")
            if "toomanyrequests" in stderr.lower():
                print("   üí° –≠—Ç–æ –æ—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ Docker Hub")
                print("   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã")
    
    print(f"\n{'='*60}")
    print("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_copies}/{len(small_images)}")
    print(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir}")
    
    if successful_copies > 0:
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã:")
        for i, image in enumerate(small_images, 1):
            image_name = image.split('/')[-1].replace(':', '_')
            print(f"   {i}. dir:{test_dir}/{image_name}")


if __name__ == "__main__":
    main()
