#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è skopeo-wrapper
"""

from skopeo_wrapper import SkopeoWrapper, ProgressInfo, get_progress_percentage
import json
import os
import time


def detailed_progress_callback(progress: ProgressInfo):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    import sys
    
    timestamp = time.strftime("%H:%M:%S")
    print(f"\n[{timestamp}] üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    print(f"   üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {progress.operation}")
    print(f"   üìç –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {progress.current_step}")
    
    if progress.parser:
        print(f"   üì¶ Blob'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(progress.parser.blobs)}")
        if progress.parser.blobs:
            print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ blob'—ã:")
            for sha256, blob in list(progress.parser.blobs.items())[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                status_emoji = "‚úÖ" if blob.status == "completed" else "üîÑ" if blob.status == "in_progress" else "‚è≥"
                size_mb = blob.size / 1024 / 1024 if blob.size else 0
                print(f"     {status_emoji} {sha256[:16]}... ({blob.status}) {size_mb:.1f}MB")
    
    print(f"   üìÑ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–ø–∏—Å–∞–Ω: {'‚úÖ' if progress.manifest_written else '‚ùå'}")
    print(f"   üîê –ü–æ–¥–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {'‚úÖ' if progress.signatures_stored else '‚ùå'}")
    
    if progress.current_blob:
        size_mb = progress.current_blob.size / 1024 / 1024 if progress.current_blob.size else 0
        print(f"   üéØ –¢–µ–∫—É—â–∏–π blob: {progress.current_blob.sha256[:16]}... ({size_mb:.1f}MB)")
    
    if progress.error:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {progress.error}")
    elif progress.completed:
        print(f"   üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if progress.parser:
            percentage = get_progress_percentage(progress, progress.parser)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ
            if progress.current_step == "getting_signatures":
                percentage = 10.0
            elif progress.current_step == "copying_blob":
                percentage = 50.0
            elif progress.current_step == "copying_config":
                percentage = 75.0
            elif progress.current_step == "writing_manifest":
                percentage = 90.0
            elif progress.current_step == "storing_signatures":
                percentage = 95.0
            else:
                percentage = 0.0
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 20
        filled_length = int(bar_length * percentage / 100)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {percentage:.1f}%")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
    sys.stdout.flush()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è skopeo-wrapper")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
    skopeo = SkopeoWrapper()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = "/tmp/skopeo_advanced_example"
    os.makedirs(test_dir, exist_ok=True)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑)
    print("\n1Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ alpine —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
    print("   üì• –ò—Å—Ç–æ—á–Ω–∏–∫: dir:/tmp/skopeo_example/alpine")
    print("   üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: dir:/tmp/skopeo_advanced_example/alpine_copy")
    print("   ‚è±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    start_time = time.time()
    success, stdout, stderr = skopeo.copy(
        source="dir:/tmp/skopeo_example/alpine",
        destination=f"dir:{test_dir}/alpine_copy",
        progress_callback=detailed_progress_callback
    )
    end_time = time.time()
    duration = end_time - start_time
    
    if success:
        print(f"‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ alpine –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è alpine: {stderr}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑)
    print("\n2Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ nginx —Å —Ç–∞–π–º–∞—É—Ç–æ–º...")
    print("   üì• –ò—Å—Ç–æ—á–Ω–∏–∫: dir:/tmp/skopeo_example/nginx_alpine")
    print("   üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: dir:/tmp/skopeo_advanced_example/nginx_copy")
    print("   ‚è∞ –¢–∞–π–º–∞—É—Ç: 60 —Å–µ–∫—É–Ω–¥")
    print("   ‚è±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    start_time = time.time()
    success, stdout, stderr = skopeo.copy(
        source="dir:/tmp/skopeo_example/nginx_alpine",
        destination=f"dir:{test_dir}/nginx_copy",
        progress_callback=detailed_progress_callback,
        timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    )
    end_time = time.time()
    duration = end_time - start_time
    
    if success:
        print(f"‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ nginx –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è nginx: {stderr}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ú–∞—Å—Å–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã)
    print("\n3Ô∏è‚É£ –ú–∞—Å—Å–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤...")
    images = [
        "dir:/tmp/skopeo_example/alpine",
        "dir:/tmp/skopeo_example/nginx_alpine",
        "dir:/tmp/skopeo_example/redis_alpine"
    ]
    
    print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {len(images)}")
    print("   üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    successful_copies = 0
    total_start_time = time.time()
    
    for i, image in enumerate(images, 1):
        image_name = image.split('/')[-1].replace(':', '_')
        print(f"\n   [{i}/{len(images)}] üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {image}...")
        print(f"   üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {image}")
        print(f"   üì§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: dir:{test_dir}/{image_name}")
        
        start_time = time.time()
        success, stdout, stderr = skopeo.copy(
            source=image,
            destination=f"dir:{test_dir}/{image_name}",
            progress_callback=detailed_progress_callback
        )
        end_time = time.time()
        duration = end_time - start_time
        
        if success:
            print(f"   ‚úÖ {image_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥!")
            successful_copies += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {image_name}: {stderr}")
    
    total_end_time = time.time()
    total_duration = total_end_time - total_start_time
    print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_copies}/{len(images)}")
    print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–∑: {total_duration/len(images):.1f} —Å–µ–∫—É–Ω–¥")
    
    # –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã)
    print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤...")
    print("   üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    local_images = [
        f"dir:{test_dir}/alpine_copy",
        f"dir:{test_dir}/nginx_copy"
    ]
    
    successful_inspects = 0
    total_layers = 0
    total_size = 0
    
    for i, image in enumerate(local_images, 1):
        print(f"\n   [{i}/{len(local_images)}] üîç –ê–Ω–∞–ª–∏–∑ {image}...")
        print(f"   üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ...")
        
        start_time = time.time()
        success, image_info, stderr = skopeo.inspect(image=image)
        end_time = time.time()
        duration = end_time - start_time
        
        if success:
            try:
                info = json.loads(image_info)
                print(f"   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   üìã –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–∑–∞:")
                print(f"     üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info.get('Architecture', 'N/A')}")
                print(f"     üíª –û–°: {info.get('Os', 'N/A')}")
                
                size = info.get('Size', 0)
                if size:
                    size_mb = size / 1024 / 1024
                    print(f"     üì¶ –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB ({size:,} bytes)")
                    total_size += size
                else:
                    print(f"     üì¶ –†–∞–∑–º–µ—Ä: N/A")
                
                layers = info.get('Layers', [])
                print(f"     üóÇÔ∏è  –°–ª–æ–µ–≤: {len(layers)}")
                total_layers += len(layers)
                
                if layers:
                    print(f"     üìã –°–ª–æ–∏:")
                    for j, layer in enumerate(layers[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ—è
                        print(f"       {j}. {layer[:64]}...")
                    if len(layers) > 3:
                        print(f"       ... –∏ –µ—â–µ {len(layers) - 3} —Å–ª–æ–µ–≤")
                
                successful_inspects += 1
                
            except json.JSONDecodeError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {stderr}")
    
    print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {successful_inspects}/{len(images)}")
    print(f"   üóÇÔ∏è  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤: {total_layers}")
    if total_size > 0:
        print(f"   üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.1f} MB")
    
    print("\n" + "=" * 60)
    print("üèÅ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    total_size = 0
    file_count = 0
    for root, dirs, files in os.walk(test_dir):
        for file in files:
            file_path = os.path.join(root, file)
            total_size += os.path.getsize(file_path)
            file_count += 1
    
    print(f"   üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤: {total_size / 1024 / 1024:.2f} MB")
    print(f"   üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
    print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len([d for d in os.listdir(test_dir) if os.path.isdir(os.path.join(test_dir, d))])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print(f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {test_dir}:")
    for item in sorted(os.listdir(test_dir)):
        item_path = os.path.join(test_dir, item)
        if os.path.isdir(item_path):
            item_size = sum(os.path.getsize(os.path.join(dirpath, filename)) 
                           for dirpath, dirnames, filenames in os.walk(item_path) 
                           for filename in filenames)
            print(f"   üìÅ {item}/ ({item_size / 1024 / 1024:.1f} MB)")
        else:
            print(f"   üìÑ {item}")


if __name__ == "__main__":
    main()
