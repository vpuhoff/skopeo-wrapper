#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è skopeo-wrapper
"""

from skopeo_wrapper import SkopeoWrapper, ProgressInfo, get_progress_percentage
import json
import os
import time


def detailed_progress_callback(progress: ProgressInfo):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    print(f"   –û–ø–µ—Ä–∞—Ü–∏—è: {progress.operation}")
    print(f"   –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {progress.current_step}")
    
    if progress.parser:
        print(f"   Blob'–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(progress.parser.blobs)}")
        for sha256, blob in progress.parser.blobs.items():
            print(f"     - {sha256[:16]}... ({blob.status})")
    
    print(f"   –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–ø–∏—Å–∞–Ω: {'‚úÖ' if progress.manifest_written else '‚ùå'}")
    print(f"   –ü–æ–¥–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {'‚úÖ' if progress.signatures_stored else '‚ùå'}")
    
    if progress.current_blob:
        print(f"   –¢–µ–∫—É—â–∏–π blob: {progress.current_blob.sha256[:16]}...")
        if progress.current_blob.size:
            print(f"   –†–∞–∑–º–µ—Ä: {progress.current_blob.size} bytes")
    
    if progress.error:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {progress.error}")
    elif progress.completed:
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if progress.parser:
            percentage = get_progress_percentage(progress, progress.parser)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ
            if progress.current_step == "getting_signatures":
                percentage = 10.0
            elif progress.current_step == "copying_blob":
                percentage = 50.0
            elif progress.current_step == "copying_config":
                percentage = 75.0
            elif progress.current_step == "writing_manifest":
                percentage = 90.0
            elif progress.current_step == "storing_signatures":
                percentage = 95.0
            else:
                percentage = 0.0
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {percentage:.1f}%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è skopeo-wrapper")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
    skopeo = SkopeoWrapper()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dir = "/tmp/skopeo_advanced_example"
    os.makedirs(test_dir, exist_ok=True)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    print("\n1Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ubuntu:22.04 —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/ubuntu:22.04",
        destination=f"dir:{test_dir}/ubuntu",
        progress_callback=detailed_progress_callback
    )
    
    if success:
        print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ubuntu –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ubuntu: {stderr}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    print("\n2Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ alpine:latest —Å —Ç–∞–π–º–∞—É—Ç–æ–º...")
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/alpine:latest",
        destination=f"dir:{test_dir}/alpine",
        timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    )
    
    if success:
        print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ alpine –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è alpine: {stderr}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ú–∞—Å—Å–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
    print("\n3Ô∏è‚É£ –ú–∞—Å—Å–æ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤...")
    images = [
        "docker://docker.io/library/nginx:alpine",
        "docker://docker.io/library/redis:alpine",
        "docker://docker.io/library/postgres:alpine"
    ]
    
    for i, image in enumerate(images, 1):
        image_name = image.split('/')[-1].replace(':', '_')
        print(f"\n   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {image}...")
        
        success, stdout, stderr = skopeo.copy(
            source=image,
            destination=f"dir:{test_dir}/{image_name}"
        )
        
        if success:
            print(f"   ‚úÖ {image_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {image_name}: {stderr}")
    
    # –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤...")
    for image in images:
        print(f"\n   –ê–Ω–∞–ª–∏–∑ {image}...")
        success, image_info, stderr = skopeo.inspect(image=image)
        
        if success:
            try:
                info = json.loads(image_info)
                print(f"   üìã {image}:")
                print(f"     –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info.get('Architecture', 'N/A')}")
                print(f"     –û–°: {info.get('Os', 'N/A')}")
                print(f"     –†–∞–∑–º–µ—Ä: {info.get('Size', 'N/A')} bytes")
                print(f"     –°–ª–æ–µ–≤: {len(info.get('Layers', []))}")
            except json.JSONDecodeError:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {image}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {image}: {stderr}")
    
    print("\n" + "=" * 60)
    print("üèÅ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_size = 0
    for root, dirs, files in os.walk(test_dir):
        for file in files:
            file_path = os.path.join(root, file)
            total_size += os.path.getsize(file_path)
    
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤: {total_size / 1024 / 1024:.2f} MB")


if __name__ == "__main__":
    main()
