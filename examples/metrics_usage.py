#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Prometheus –º–µ—Ç—Ä–∏–∫ –≤ skopeo-wrapper
"""

import time
import json
from skopeo_wrapper import SkopeoWrapper, SkopeoMetrics, OperationTracker
from prometheus_client import start_http_server
import os


def example_basic_metrics():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
    print("üöÄ –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = "/tmp/skopeo_metrics_example"
    os.makedirs(test_dir, exist_ok=True)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    print("\nüì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ alpine:latest...")
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/alpine:latest",
        destination=f"dir:{test_dir}/alpine"
    )
    
    if success:
        print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    print("\nüîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –æ–±—Ä–∞–∑–∞ ubuntu:22.04...")
    success, stdout, stderr = skopeo.inspect(
        image="docker://docker.io/library/ubuntu:22.04"
    )
    
    if success:
        print("‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\nüìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
    metrics = skopeo.get_metrics()
    if metrics:
        print(metrics)
    else:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")


def example_custom_metrics():
    """–ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
    custom_metrics = SkopeoMetrics()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    skopeo = SkopeoWrapper(metrics=custom_metrics, enable_metrics=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = "/tmp/skopeo_custom_metrics"
    os.makedirs(test_dir, exist_ok=True)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤...")
    images = [
        "docker://docker.io/library/nginx:alpine",
        "docker://docker.io/library/redis:alpine"
    ]
    
    for image in images:
        image_name = image.split('/')[-1].replace(':', '_')
        print(f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {image}...")
        
        success, stdout, stderr = skopeo.copy(
            source=image,
            destination=f"dir:{test_dir}/{image_name}"
        )
        
        if success:
            print(f"   ‚úÖ {image_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {image_name}: {stderr}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:")
    metrics_dict = skopeo.get_metrics_dict()
    if metrics_dict:
        print(json.dumps(metrics_dict, indent=2, ensure_ascii=False))
    else:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")


def example_operation_tracker():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OperationTracker"""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OperationTracker")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
    metrics = SkopeoMetrics()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = "/tmp/skopeo_tracker_example"
    os.makedirs(test_dir, exist_ok=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OperationTracker –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    with OperationTracker("copy", metrics, 
                         source="docker://docker.io/library/alpine:latest",
                         destination=f"dir:{test_dir}/alpine_tracked") as tracker:
        
        print("üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É blob'–æ–≤
        for i in range(3):
            blob_size = 1024 * 1024 * (i + 1)  # 1MB, 2MB, 3MB
            tracker.add_blob(blob_size)
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω blob {i+1}: {blob_size} bytes")
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    metrics_data = metrics.get_metrics()
    if metrics_data:
        print(metrics_data)
    else:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")


def example_metrics_server():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
    print("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ localhost:8001...")
    start_http_server(8001)
    
    print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001/metrics")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    test_dir = "/tmp/skopeo_server_example"
    os.makedirs(test_dir, exist_ok=True)
    
    print("\nüì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/alpine:latest",
        destination=f"dir:{test_dir}/alpine"
    )
    
    if success:
        print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    # –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
    success, stdout, stderr = skopeo.inspect(
        image="docker://docker.io/library/ubuntu:22.04"
    )
    
    if success:
        print("‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    print("\nüåê HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:8001")
    print("üìä –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001/metrics")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")


def example_error_metrics():
    """–ü—Ä–∏–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö"""
    print("\nüöÄ –ü—Ä–∏–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
    print("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–∑–∞...")
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/nonexistent:latest",
        destination="dir:/tmp/nonexistent"
    )
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {stderr}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    print("\n‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...")
    test_dir = "/tmp/skopeo_error_example"
    os.makedirs(test_dir, exist_ok=True)
    
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/alpine:latest",
        destination=f"dir:{test_dir}/alpine"
    )
    
    if success:
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö:")
    metrics = skopeo.get_metrics()
    if metrics:
        print(metrics)
    else:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")


def example_heartbeat_metrics():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è heartbeat –º–µ—Ç—Ä–∏–∫"""
    print("üíì –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è heartbeat –º–µ—Ç—Ä–∏–∫")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Prometheus
    print("\nüåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 9090...")
    start_http_server(9090)
    print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:9090/metrics")
    
    test_dir = "/tmp/skopeo_heartbeat_test"
    os.makedirs(test_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def progress_callback(progress_info):
        if hasattr(progress_info, 'parser'):
            progress_percent = progress_info.parser.get_progress_percentage()
            print(f"  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}% - {progress_info.current_step}")
    
    print("\nüì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Å heartbeat –º–µ—Ç—Ä–∏–∫–∞–º–∏...")
    print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:9090/metrics –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üí° –°–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print("   - skopeo_active_operation_duration_seconds - —Ä–∞—Å—Ç–µ—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫")
    print("   - skopeo_operation_speed_blobs_per_second - —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   - skopeo_operation_stale_seconds - –≤—Ä–µ–º—è –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    success, stdout, stderr = skopeo.copy(
        source="docker://docker.io/library/ubuntu:22.04",
        destination=f"dir:{test_dir}/ubuntu",
        progress_callback=progress_callback,
        timeout=600
    )
    
    if success:
        print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    metrics_dict = skopeo.get_metrics_dict()
    
    print(f"  - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {metrics_dict.get('skopeo_active_operations', {})}")
    print(f"  - –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: —Å–º. skopeo_operation_speed_blobs_per_second")
    
    print("\n‚è∏Ô∏è  –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Prometheus –º–µ—Ç—Ä–∏–∫ –≤ skopeo-wrapper")
    print("=" * 70)
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        example_basic_metrics()
        
        # –ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        example_custom_metrics()
        
        # –ü—Ä–∏–º–µ—Ä —Å OperationTracker
        example_operation_tracker()
        
        # –ü—Ä–∏–º–µ—Ä —Å —Å–µ—Ä–≤–µ—Ä–æ–º –º–µ—Ç—Ä–∏–∫ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
        # example_metrics_server()
        
        # –ü—Ä–∏–º–µ—Ä —Å –æ—à–∏–±–∫–∞–º–∏
        example_error_metrics()
        
        # –ü—Ä–∏–º–µ—Ä —Å heartbeat –º–µ—Ç—Ä–∏–∫–∞–º–∏
        example_heartbeat_metrics()
        
        print("\n" + "=" * 70)
        print("üèÅ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å prometheus_client –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Grafana –¥–∞—à–±–æ—Ä–¥–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –≤ Prometheus")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
