#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤
"""

import json
from skopeo_wrapper import SkopeoWrapper, create_progress_callback


def example_basic_image_check():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤"""
    print("üîç –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–µ—Ä—Ç–∫–∏
    skopeo = SkopeoWrapper()
    
    # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    images = [
        "docker://docker.io/library/alpine:latest",
        "docker://docker.io/library/ubuntu:22.04",
        "docker://docker.io/library/nonexistent:latest",
        "docker://docker.io/library/nginx:alpine"
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤:")
    
    for image in images:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {image}...")
        
        success, exists, error_msg = skopeo.image_exists(
            image=image,
            progress_callback=create_progress_callback(show_progress=True)
        )
        
        if success:
            if exists:
                print(f"   ‚úÖ –û–±—Ä–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {error_msg}")


def example_detailed_image_check():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤")
    print("=" * 60)
    
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±—Ä–∞–∑–æ–≤
    test_cases = [
        {
            "image": "docker://docker.io/library/alpine:latest",
            "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –æ–±—Ä–∞–∑ Alpine Linux"
        },
        {
            "image": "docker://docker.io/library/ubuntu:22.04",
            "description": "–û–±—Ä–∞–∑ Ubuntu 22.04"
        },
        {
            "image": "docker://docker.io/library/nonexistent:latest",
            "description": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑"
        },
        {
            "image": "docker://docker.io/library/redis:alpine",
            "description": "–û–±—Ä–∞–∑ Redis –Ω–∞ Alpine"
        }
    ]
    
    results = []
    
    for test_case in test_cases:
        image = test_case["image"]
        description = test_case["description"]
        
        print(f"\nüì¶ {description}")
        print(f"   –û–±—Ä–∞–∑: {image}")
        
        success, exists, error_msg = skopeo.image_exists(image=image)
        
        result = {
            "image": image,
            "description": description,
            "success": success,
            "exists": exists,
            "error": error_msg
        }
        results.append(result)
        
        if success:
            if exists:
                print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ - {error_msg}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(results)}")
    print(f"   –°—É—â–µ—Å—Ç–≤—É—é—Ç: {sum(1 for r in results if r['success'] and r['exists'])}")
    print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {sum(1 for r in results if r['success'] and not r['exists'])}")
    print(f"   –û—à–∏–±–∫–∏: {sum(1 for r in results if not r['success'])}")
    
    return results


def example_json_output():
    """–ü—Ä–∏–º–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    print("\nüîç –ü—Ä–∏–º–µ—Ä —Å JSON –≤—ã–≤–æ–¥–æ–º")
    print("=" * 60)
    
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    images = [
        "docker://docker.io/library/alpine:latest",
        "docker://docker.io/library/ubuntu:22.04",
        "docker://docker.io/library/nonexistent:latest"
    ]
    
    results = []
    
    for image in images:
        success, exists, error_msg = skopeo.image_exists(image=image)
        
        result = {
            "image": image,
            "exists": exists,
            "success": success,
            "error": error_msg
        }
        results.append(result)
    
    print("\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:")
    print(json.dumps(results, indent=2, ensure_ascii=False))


def example_conditional_operations():
    """–ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    print("\nüîç –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("=" * 60)
    
    skopeo = SkopeoWrapper(enable_metrics=True)
    
    source_image = "docker://docker.io/library/alpine:latest"
    target_image = "docker://docker.io/library/alpine:backup"
    
    print(f"üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–∑: {source_image}")
    print(f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—Ä–∞–∑: {target_image}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞...")
    success, source_exists, error_msg = skopeo.image_exists(source_image)
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞: {error_msg}")
        return
    
    if not source_exists:
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return
    
    print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞...")
    success, target_exists, error_msg = skopeo.image_exists(target_image)
    
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞: {error_msg}")
        return
    
    if target_exists:
        print(f"‚ö†Ô∏è  –¶–µ–ª–µ–≤–æ–π –æ–±—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –æ–±—Ä–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        print(f"üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        # success, stdout, stderr = skopeo.copy(source_image, target_image)
        print(f"   (–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ)")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤")
    print("=" * 80)
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        example_basic_image_check()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        example_detailed_image_check()
        
        # JSON –≤—ã–≤–æ–¥
        example_json_output()
        
        # –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        example_conditional_operations()
        
        print("\n" + "=" * 80)
        print("üèÅ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   - CLI –∫–æ–º–∞–Ω–¥–∞: skopeo-wrapper image-exists <image>")
        print("   - JSON –≤—ã–≤–æ–¥: skopeo-wrapper image-exists <image> --json")
        print("   - –° –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: skopeo-wrapper image-exists <image> --progress")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()